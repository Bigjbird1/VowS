generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(cuid())
  title       String
  description String
  price       Float
  salePrice   Float?
  isOnSale    Boolean     @default(false)
  images      String[]
  category    String
  subcategory String?
  condition   String
  tags        String[]
  rating      Float       @default(0)
  reviewCount Int         @default(0)
  inventory   Int         @default(0)
  freeShipping Boolean    @default(false)
  sellerId    String
  status      String      @default("ACTIVE")
  salesCount  Int         @default(0)
  isVisible   Boolean     @default(true)
  viewCount   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  seller      User        @relation("SellerProducts", fields: [sellerId], references: [id])
  reviews     Review[]
  searchLogs  SearchLog[] @relation("ProductSearches")
  orderItems  OrderItem[]

  @@index([category])
  @@index([subcategory])
  @@index([tags])
  @@index([status])
  @@index([sellerId])
  @@index([createdAt])
  @@index([price])
  @@index([rating])
  @@index([salesCount])
  @@index([title])
  @@index([description])
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
  @@index([rating])
}

model SearchHistory {
  id        String   @id @default(cuid())
  userId    String   @unique
  searches  Json     // Array of recent searches
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SearchLog {
  id              String   @id @default(cuid())
  query           String
  filters         Json?    // Search filters used
  sorting         String?  // Sort option used
  results         Int      // Number of results returned
  clickedId       String?  // ID of product clicked, if any
  userId          String?  // Optional: user who performed the search
  createdAt       DateTime @default(now())
  user            User?    @relation(fields: [userId], references: [id])
  clickedProduct  Product? @relation("ProductSearches", fields: [clickedId], references: [id])

  @@index([query])
  @@index([userId])
  @@index([createdAt])
  @@index([clickedId])
}

model User {
  id            String         @id @default(cuid())
  email         String        @unique
  name          String?
  role          UserRole      @default(USER)
  products      Product[]     @relation("SellerProducts")
  reviews       Review[]
  searchHistory SearchHistory?
  searchLogs    SearchLog[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  product   Product  @relation(fields: [productId], references: [id])
  // ... other order item fields

  @@index([orderId])
  @@index([productId])
}

enum UserRole {
  USER
  SELLER
  ADMIN
}
